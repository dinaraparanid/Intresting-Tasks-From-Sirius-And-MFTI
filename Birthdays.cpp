/*Миша хочет запомнить дни рождения всех своих n друзей, чтобы знать кого поздравлять каждый день. К сожалению, иногда возникают ситуации, когда у нескольких друзей день рождения
в один день. Это может сбить Мишу с толку, поэтому он решил запомнить день рождения друга,
который ему больше всего нравится, в случае если у нескольких друзей день рождения в один день.
Имея список дней рождения для каждого из друзей, и насколько Миша любит каждого друга,
выведите, дни рождения каких друзей Миша запомнит.
Формат входных данных
В первой строке дано одно целое число n (1 6 n 6 2000) — количество друзей Миши.
Далее в n строках идут описания друзей. Сначала идет имя – строка s начинающаяся с заглавной буквы английского алфавита, за которой следуют строчные буквы английского алфавита
(1 6 |s| 6 10). Далее идет одно целое число ci (0 6 ci 6 105
) — характеристика отношения Миши к
этому другу. Чем больше это число, тем больше ему нравится этот друг. Затем идет дата рождения
этого друга в формате DD/MM (DD – день рождения, MM – месяц рождения, каждое число состоит
ровно из двух цифр).
Все дни рождения — реальные даты для 2020 (високосного) года. Все ci различны. Все имена
друзей различны.
Формат выходных данных
В первой строке выведите одно число k — количество друзей, дни рождения которых запомнит
Миша. Далее выведите k строк — имена этих детей в алфавитном порядке.
Примеры
стандартный ввод стандартный вывод
3
Sanna 1 16/03
Simon 2 16/03
Saga 3 14/10

2
Saga
Simon


10
Oden 78 03/12
Tor 132 14/05
Freja 10000 14/05
Loke 512 12/10
Hel 14 04/05
Fjorgynn 532 13/05
Hildegun 500 13/05
Vindsval 17 03/12
Snotra 20 04/05
Kvaser 420 03/12

5
Fjorgynn
Freja
Kvaser
Loke
Snotra*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <string>
 
struct guy
{
    int like;
    std::pair<int, int> date;
    std::string name;
};
 
int main ()
{
    int n;
    std::scanf("%d", &n);
    char h;
 
    std::vector<guy> guys(n);
 
    for (auto& e : guys)
        std::cin >> e.name >> e.like >> e.date.first >> h >> e.date.second;
 
    std::sort(guys.rbegin(), guys.rend(), [](guy& a, guy& b) { return a.like < b.like; });
 
    std::set<std::pair<int, int>> dates;
    std::set<std::string> ans;
 
    for (auto i : guys)
    {
        if (dates.find(i.date) == dates.end())
            ans.insert(i.name);
 
        dates.insert(i.date);
    }
 
    std::printf("%d\n", ans.size());
 
    for (auto i : ans)
        std::puts(i.c_str());
 
    return 0;
}
