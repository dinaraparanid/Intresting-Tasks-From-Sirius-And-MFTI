/*
Белоснежка и гномы
«Ну не гномы, а наказание какое-то!», — подумала Белоснежка, в очередной раз пытаясь уложить гномов спать. Одного уложишь — другой уже проснулся! И так всю ночь.
У Белоснежки n гномов, и все они очень разные. Она знает, что для того, чтобы уложить спать i-го гнома нужно ai минут, и после этого он будет спать ровно bi минут. Помогите Белоснежке узнать, может ли она получить хотя бы минутку отдыха, когда все гномы будут спать, и если да, то в каком порядке для этого нужно укладывать гномов спать.
Например, пусть есть всего два гнома, a1=1, b1=10, a2=10, b2=20. Если Белоснежка сначала начнет укладывать первого гнома, то потом ей потребуется целых 10 минут, чтобы уложить второго, а за это время проснется первый. Если же она начнет со второго гнома, то затем она успеет уложить первого и получит целых 10 минут отдыха.
Входные данные
Первая строка входных данных содержит число n (1≤n≤105), вторая строка содержит числа a1,a2,… an, третья — числа b1,b2,… bn (1≤ai,bi≤109).
Выходные данные
Выведите n чисел — порядок, в котором нужно укладывать гномов спать. Если Белоснежке отдохнуть не удастся, выведите число −1.
Примеры
Ввод
Вывод
2
1 10
10 20
2 1
----------

2
10 10
10 10
-1
*/

#include <cstdio>
#include <vector>
#include <tuple>
#include <algorithm>
typedef std::tuple<int, int, int> tup;

bool cmp(const tup arg1, const tup arg2)
{
	return std::get<0>(arg1) + std::get<1>(arg1)
	        < std::get<0>(arg2) + std::get<1>(arg2);
}

int main()
{
	int n = 0;
	std::scanf("%d", &n);
	
	std::vector<tup> pgnom(n);
	for (int i = 0; i < n; i++)
		std::get<2>(pgnom[i]) = i + 1;
	
	for (tup& i : pgnom)
		std::scanf("%d", &std::get<0>(i));
	
	for (tup& i : pgnom)
		std::scanf("%d", &std::get<1>(i));
	
	std::sort(pgnom.rbegin(), pgnom.rend(), cmp);
	int min_dead = std::get<1>(pgnom[0]);
	
	for (int i = 1; i < n; i++)
	{
		min_dead -= std::get<0>(pgnom[i]);
		if (min_dead <= 0)
		{
			std::puts("-1");
			return 0;
		}
		if (min_dead > std::get<1>(pgnom[i]))
			min_dead = std::get<1>(pgnom[i]);
	}
	
	for (tup i : pgnom)
		std::printf("%d ", std::get<2>(i));
	return 0;
}
